rules:
  # =====================================================================
  # OWASP Top 10 2021 Coverage for JavaScript/TypeScript
  # =====================================================================

  # ===================================================================== 
  # A01:2021 - Broken Access Control
  # =====================================================================

  # Missing authorization checks
  - id: js-missing-auth-check
    message: "Route handler missing authentication/authorization check"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: |
              $APP.$METHOD($PATH, async ($REQ, $RES) => {
                ...
              })
          - pattern: |
              $APP.$METHOD($PATH, ($REQ, $RES) => {
                ...
              })
      - pattern-not-inside: |
          ...
          if ($REQ.user) { ... }
          ...
      - pattern-not-inside: |
          ...
          if ($REQ.isAuthenticated()) { ... }
          ...
      - metavariable-regex:
          metavariable: $METHOD
          regex: (post|put|delete|patch)
    metadata:
      category: security
      owasp: "A01:2021"
      cwe: CWE-862
      confidence: low
      subcategory: access-control

  # Insecure direct object reference
  - id: js-idor-vulnerability
    message: "Potential IDOR vulnerability - verify user authorization before accessing resource"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: $DB.findById($REQ.params.id)
          - pattern: "$DB.findOne({ _id: $REQ.params.id })"
          - pattern: "$DB.findOne({ id: $REQ.params.id })"
          - pattern: fs.readFile($REQ.params.file, ...)
          - pattern: fs.readFileSync($REQ.params.file)
      - pattern-not-inside: |
          ...
          if ($REQ.user.id === ...) { ... }
          ...
      - pattern-not-inside: |
          ...
          if ($RESOURCE.userId === $REQ.user.id) { ... }
          ...
      - pattern-not-inside: |
          ...
          authorize($REQ.user, ...)
          ...
    metadata:
      category: security
      owasp: "A01:2021"
      cwe: CWE-639
      confidence: medium
      subcategory: access-control

  # Path traversal - using taint mode for accurate detection
  - id: js-path-traversal
    message: "Path traversal vulnerability detected. User-controlled data flows into file operations without proper validation. Use path.resolve() and validate that result is within allowed directory."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: ctx.request.body
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
      # Path operations that propagate taint
      - pattern: path.join(...)
        from: $A
        to: $A
      - pattern: path.resolve(...)
        from: $A
        to: $A
    pattern-sinks:
      # File system operations
      - pattern: fs.readFile(...)
      - pattern: fs.readFileSync(...)
      - pattern: fs.writeFile(...)
      - pattern: fs.writeFileSync(...)
      - pattern: fs.createReadStream(...)
      - pattern: fs.createWriteStream(...)
      - pattern: fs.appendFile(...)
      - pattern: fs.appendFileSync(...)
      - pattern: fs.unlink(...)
      - pattern: fs.unlinkSync(...)
      # Dynamic imports
      - pattern: require(...)
      - pattern: import(...)
    pattern-sanitizers:
      # Validation that checks path is within allowed directory
      - pattern: path.normalize(...).startsWith(...)
      - pattern: $PATH.indexOf("..") === -1
    metadata:
      category: security
      owasp: "A01:2021"
      cwe: CWE-22
      confidence: high
      subcategory: access-control

  # Unvalidated redirect - using taint mode for accurate detection
  - id: js-open-redirect
    message: "Open redirect vulnerability detected. User-controlled data flows into redirect without validation. Validate redirect URLs against allowlist."
    severity: MEDIUM
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: ctx.request.body
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
      # Client-side sources
      - pattern: location.search
      - pattern: window.location.search
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # Server-side redirects
      - pattern: res.redirect(...)
      - pattern: res.location(...)
      - pattern: ctx.redirect(...)
      # Client-side redirects
      - pattern: window.location = ...
      - pattern: window.location.href = ...
      - pattern: document.location = ...
      - pattern: document.location.href = ...
      - pattern: location.assign(...)
      - pattern: location.replace(...)
    pattern-sanitizers:
      # URL validation
      - pattern: $URL.startsWith("http://")
      - pattern: $URL.startsWith("https://")
      - pattern: new URL(...)
    metadata:
      category: security
      owasp: "A01:2021"
      cwe: CWE-601
      confidence: high
      subcategory: access-control

  # CORS misconfiguration
  - id: js-cors-allow-all
    message: "CORS configured to allow all origins - security risk"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          cors({ origin: "*" })
      - pattern: |
          $RES.setHeader("Access-Control-Allow-Origin", "*")
      - pattern: |
          $RES.header("Access-Control-Allow-Origin", "*")
    metadata:
      category: security
      owasp: "A01:2021"
      cwe: CWE-942
      confidence: high
      subcategory: access-control

  # ===================================================================== 
  # A02:2021 - Cryptographic Failures
  # =====================================================================

  # Weak cryptographic hash algorithms
  - id: js-weak-hash-md5
    message: "MD5 is cryptographically broken and should not be used"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: crypto.createHash("md5")
      - pattern: crypto.createHash('md5')
      - pattern: require('md5')
      - pattern: import $X from 'md5'
      - pattern: import * as $X from 'md5'
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-327
      confidence: high
      subcategory: crypto

  - id: js-weak-hash-sha1
    message: "SHA1 is cryptographically weak and should not be used for security"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: crypto.createHash("sha1")
      - pattern: crypto.createHash('sha1')
      - pattern: require('sha1')
      - pattern: import $X from 'sha1'
      - pattern: import * as $X from 'sha1'
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-327
      confidence: high
      subcategory: crypto

  # Insecure random number generation
  - id: js-insecure-random
    message: "Math.random() used for security-sensitive operation - use crypto.randomBytes() instead"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern: Math.random()
      - pattern-inside: |
          ...
          $TOKEN = ...
          ...
      - metavariable-regex:
          metavariable: $TOKEN
          regex: (?i).*(token|secret|key|password|salt|nonce|session|auth|crypto).*
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-338
      confidence: medium
      subcategory: crypto
      fix: "Use crypto.randomBytes() or crypto.getRandomValues() for security-sensitive operations"

  # Hardcoded secrets and credentials
  - id: js-hardcoded-secret
    message: "Hardcoded secret or credential detected - use environment variables"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: const $VAR = "..."
          - pattern: let $VAR = "..."
          - pattern: var $VAR = "..."
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(password|passwd|pwd|secret|api[_-]?key|private[_-]?key|access[_-]?token|auth[_-]?token|session[_-]?key).*
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-798
      confidence: medium
      subcategory: crypto

  # Weak cipher algorithms
  - id: js-weak-cipher
    message: "Weak cipher algorithm detected - use AES-256-GCM or ChaCha20-Poly1305"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: crypto.createCipher("des", ...)
      - pattern: crypto.createCipher("des-ede", ...)
      - pattern: crypto.createCipher("des-ede-cbc", ...)
      - pattern: crypto.createCipher("des3", ...)
      - pattern: crypto.createCipher("rc4", ...)
      - pattern: crypto.createCipher("rc2", ...)
      - pattern: crypto.createCipher("blowfish", ...)
      - pattern: crypto.createCipheriv("des", ...)
      - pattern: crypto.createCipheriv("rc4", ...)
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-327
      confidence: high
      subcategory: crypto

  # TLS/SSL certificate validation disabled
  - id: js-tls-reject-unauthorized-false
    message: "TLS certificate validation disabled - vulnerable to MITM attacks"
    severity: CRITICAL
    languages: [javascript, typescript]
    pattern-either:
      - pattern: process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"
      - pattern: process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
      - pattern: process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = "0"
      - pattern: |
          { ..., rejectUnauthorized: false, ... }
      - pattern: |
          axios.create({ ..., rejectUnauthorized: false, ... })
      - pattern: |
          https.request({ ..., rejectUnauthorized: false, ... })
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-295
      confidence: high
      subcategory: crypto

  # Insecure TLS versions
  - id: js-insecure-tls-version
    message: "Insecure TLS version - use TLS 1.2 or higher"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          { ..., secureProtocol: "SSLv2_method", ... }
      - pattern: |
          { ..., secureProtocol: "SSLv3_method", ... }
      - pattern: |
          { ..., secureProtocol: "TLSv1_method", ... }
      - pattern: |
          { ..., secureProtocol: "TLSv1_1_method", ... }
      - pattern: |
          tls.createSecureContext({ ..., secureProtocol: "SSLv3_method", ... })
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-327
      confidence: high
      subcategory: crypto

  # Missing encryption in transit
  - id: js-insecure-protocol
    message: "HTTP server listening on external interface - should use HTTPS"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: |
              http.createServer(...).listen($PORT, "0.0.0.0", ...)
          - pattern: |
              http.createServer(...).listen($PORT)
          - pattern: |
              require("http").createServer(...).listen($PORT, "0.0.0.0", ...)
      - pattern-not-inside: |
          ...
          if (process.env.NODE_ENV === "development") { ... }
          ...
      - metavariable-comparison:
          metavariable: $PORT
          comparison: $PORT != 3000 and $PORT != 8080
    metadata:
      category: security
      owasp: "A02:2021"
      cwe: CWE-319
      confidence: low
      subcategory: crypto

  # ===================================================================== 
  # A03:2021 - Injection
  # =====================================================================

  # Code injection via eval
  - id: js-code-injection-eval
    message: "Code injection via eval() - can execute arbitrary code"
    severity: CRITICAL
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          # Direct eval usage
          - pattern: eval($EXPR)
          - pattern: eval($REQ.$PROP)
          # Function constructor with user input
          - pattern: Function($REQ.$PROP)
          - pattern: new Function($REQ.$PROP)
          # setTimeout/setInterval with string (not function)
          - patterns:
              - pattern-either:
                  - pattern: setTimeout($CODE_STR, ...)
                  - pattern: setInterval($CODE_STR, ...)
              - metavariable-pattern:
                  metavariable: $CODE_STR
                  patterns:
                    - pattern-not: $FUNC
                    - pattern: "..."
          # VM module with user input
          - pattern: vm.runInNewContext($REQ.$PROP)
          - pattern: vm.runInThisContext($REQ.$PROP)
      # Exclude hardcoded strings
      - pattern-not: eval("...")
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-94
      confidence: high
      subcategory: injection

  # SQL injection - using taint mode for accurate detection
  - id: js-sql-injection
    message: "SQL injection vulnerability detected. User-controlled data flows into SQL query without proper sanitization. Use parameterized queries with placeholders (?, $1, etc.) to prevent SQL injection."
    severity: CRITICAL
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources (Express/Node.js)
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: req.headers
      # Koa framework
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: ctx.request.body
      # Fastify framework
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
      # Template literals are implicitly tracked
    pattern-sinks:
      # MySQL/PostgreSQL/SQLite query methods
      - pattern: $DB.query(...)
      - pattern: $DB.execute(...)
      - pattern: $DB.raw(...)
      - pattern: $CONN.query(...)
      - pattern: $CONN.execute(...)
      - pattern: mysql.query(...)
      - pattern: mysql2.query(...)
      - pattern: pg.query(...)
      - pattern: sqlite3.run(...)
      - pattern: $DB.exec(...)
      # Sequelize raw queries
      - pattern: sequelize.query(...)
      - pattern: $MODEL.sequelize.query(...)
      # Knex raw queries
      - pattern: knex.raw(...)
      - pattern: $KNEX.raw(...)
    pattern-sanitizers:
      # Parameterized queries with placeholders
      - pattern: $DB.query("...", [...])
      - pattern: $DB.execute("...", [...])
      # ORM methods that use parameters  
      - pattern: $MODEL.findAll(...)
      - pattern: $MODEL.findOne(...)
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-89
      confidence: high
      subcategory: injection

  # NoSQL injection (MongoDB)
  - id: js-nosql-injection
    message: "NoSQL injection vulnerability - validate and sanitize user input"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      # Directly passing request object to query methods
      - pattern: $COLLECTION.find($REQ.query)
      - pattern: $COLLECTION.find($REQ.body)
      - pattern: $COLLECTION.findOne($REQ.query)
      - pattern: $COLLECTION.findOne($REQ.body)
      - pattern: $COLLECTION.update($REQ.query, ...)
      - pattern: $COLLECTION.update($REQ.body, ...)
      - pattern: $COLLECTION.remove($REQ.query)
      - pattern: $COLLECTION.deleteOne($REQ.query)
      - pattern: $COLLECTION.deleteMany($REQ.query)
      # Query operators with user input
      - pattern: "$MODEL.find({ ..., $ne: $REQ.query.$PARAM, ... })"
      - pattern: "$MODEL.find({ ..., $gt: $REQ.query.$PARAM, ... })"
      - pattern: "$MODEL.find({ ..., $regex: $REQ.query.$PARAM, ... })"
      - pattern: "$MODEL.find({ ..., $where: $REQ.query.$PARAM, ... })"
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-943
      confidence: high
      subcategory: injection

  # Command injection - using taint mode for accurate detection
  - id: js-command-injection
    message: "Command injection vulnerability detected. User-controlled data flows into system command without proper sanitization. Use child_process.spawn with array arguments or proper escaping."
    severity: CRITICAL
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: req.headers
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: ctx.request.body
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # Command execution methods
      - pattern: child_process.exec(...)
      - pattern: child_process.execSync(...)
      - pattern: cp.exec(...)
      - pattern: exec(...)
      - pattern: execSync(...)
      - pattern: child_process.execFile(...)
      - pattern: execFile(...)
      # Shell option enabled - spawn with shell is dangerous
      - pattern: child_process.spawn(...)
      - pattern: spawn(...)
    pattern-sanitizers:
      # Array-based spawn without shell is safe (no shell interpretation)
      - pattern: child_process.spawnSync($CMD, [...])
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-78
      confidence: high
      subcategory: injection

  # LDAP injection - using taint mode for accurate detection
  - id: js-ldap-injection
    message: "LDAP injection vulnerability detected. User-controlled data flows into LDAP query without sanitization. Escape LDAP special characters."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # LDAP query methods
      - pattern: $CLIENT.search(...)
      - pattern: $CLIENT.bind(...)
      - pattern: $CLIENT.add(...)
      - pattern: $CLIENT.modify(...)
    pattern-sanitizers:
      # LDAP escaping functions
      - pattern: ldap.escapeDN(...)
      - pattern: ldap.escapeFilter(...)
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-90
      confidence: high
      subcategory: injection

  # XSS via innerHTML - using taint mode for accurate detection
  - id: js-xss-innerhtml
    message: "XSS vulnerability detected. User-controlled data flows into innerHTML/outerHTML/document.write without sanitization. Use textContent for plain text or DOMPurify.sanitize() for HTML."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: ctx.request.body
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
      # Client-side sources
      - pattern: location.search
      - pattern: location.hash
      - pattern: window.location.search
      - pattern: window.location.hash
      - pattern: document.URL
      - pattern: document.documentURI
      - pattern: document.referrer
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # DOM manipulation methods
      - pattern: $ELEMENT.innerHTML = ...
      - pattern: $ELEMENT.outerHTML = ...
      - pattern: $ELEMENT.insertAdjacentHTML(...)
      - pattern: document.write(...)
      - pattern: document.writeln(...)
    pattern-sanitizers:
      # Sanitization libraries
      - pattern: DOMPurify.sanitize(...)
      - pattern: sanitizeHtml(...)
      # Safe text-only methods
      - pattern: $ELEMENT.textContent = ...
      - pattern: $ELEMENT.innerText = ...
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-79
      confidence: high
      subcategory: injection

  # DOM-based XSS - using taint mode for accurate detection
  - id: js-dom-xss
    message: "DOM XSS vulnerability detected. User-controlled data flows into dangerous DOM property without validation. Validate and sanitize user input before using in DOM."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
      # Client-side sources
      - pattern: location.search
      - pattern: location.hash
      - pattern: window.location.search
      - pattern: window.location.hash
      - pattern: document.URL
      - pattern: document.referrer
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # Dangerous DOM properties
      - pattern: $ELEMENT.setAttribute("href", ...)
      - pattern: $ELEMENT.setAttribute("src", ...)
      - pattern: $ELEMENT.setAttribute("action", ...)
      - pattern: $ELEMENT.setAttribute("formaction", ...)
      - pattern: $ELEMENT.src = ...
      - pattern: $ELEMENT.href = ...
      # Location manipulation
      - pattern: location = ...
      - pattern: location.href = ...
      - pattern: location.assign(...)
      - pattern: window.location = ...
      - pattern: window.location.href = ...
    pattern-sanitizers:
      # Sanitization functions
      - pattern: encodeURIComponent(...)
      - pattern: encodeURI(...)
      - pattern: DOMPurify.sanitize(...)
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-79
      confidence: high
      subcategory: injection

  # XXE (XML External Entity)
  - id: js-xxe-vulnerability
    message: "XXE vulnerability - disable external entity processing in XML parser"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: new DOMParser().parseFromString($XML, "text/xml")
          - pattern: libxmljs.parseXml($XML)
          - pattern: xml2js.parseString($XML, ...)
          - pattern: parser.parseFromString($XML, ...)
      - pattern-not-inside: |
          ...
          noent: false
          ...
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-611
      confidence: medium
      subcategory: injection

  # Server-side template injection - using taint mode for accurate detection
  - id: js-template-injection
    message: "Template injection vulnerability detected. User-controlled data flows into template compilation/rendering. Use pre-compiled templates or sanitize input."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.cookies
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # Template compilation and rendering
      - pattern: eval(...)
      - pattern: _.template(...)
      - pattern: lodash.template(...)
      - pattern: Handlebars.compile(...)
      - pattern: pug.compile(...)
      - pattern: $ENGINE.renderString(...)
      - pattern: $ENGINE.compile(...)
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-1336
      confidence: high
      subcategory: injection

  # Prototype pollution
  - id: js-prototype-pollution
    message: "Prototype pollution vulnerability - can lead to arbitrary code execution"
    severity: CRITICAL
    languages: [javascript, typescript]
    pattern-either:
      # Direct prototype manipulation
      - pattern: $OBJ["__proto__"] = $VAL
      - pattern: $OBJ.__proto__ = $VAL
      - pattern: $OBJ["constructor"]["prototype"] = $VAL
      - pattern: $OBJ.constructor.prototype = $VAL
      - pattern: Object.setPrototypeOf($OBJ, $PROTO)
      # Unsafe merge with user input
      - pattern: Object.assign($TARGET, $REQ.body)
      - pattern: Object.assign($TARGET, $REQ.query)
      - pattern: lodash.merge($TARGET, $REQ.body)
      - pattern: _.merge($TARGET, $REQ.query)
      # Dynamic property assignment with __proto__
      - patterns:
          - pattern: $OBJ[$KEY] = $VAL
          - metavariable-regex:
              metavariable: $KEY
              regex: (__proto__|constructor|prototype)
    metadata:
      category: security
      owasp: "A03:2021"
      cwe: CWE-1321
      confidence: high
      subcategory: injection

  # ===================================================================== 
  # A04:2021 - Insecure Design
  # =====================================================================

  # Missing rate limiting
  - id: js-missing-rate-limit
    message: "Route missing rate limiting - vulnerable to brute force attacks"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: |
              $APP.post("/login", ...)
          - pattern: |
              $APP.post("/api/login", ...)
          - pattern: |
              $APP.post("*/login", ...)
      - pattern-not-inside: |
          ...
          rateLimit(...)
          ...
    metadata:
      category: security
      owasp: "A04:2021"
      cwe: CWE-307
      confidence: low
      subcategory: design

  # Insufficient input validation
  - id: js-missing-input-validation
    message: "User input used without validation"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: $DB.find($REQ.query)
          - pattern: $DB.findOne($REQ.params)
          - pattern: $FS.readFile($REQ.body.$PROP, ...)
      - pattern-not-inside: |
          ...
          if (typeof $REQ.$PROP === ...) { ... }
          ...
      - pattern-not-inside: |
          ...
          validator.validate(...)
          ...
    metadata:
      category: security
      owasp: "A04:2021"
      cwe: CWE-20
      confidence: low
      subcategory: design

  # Predictable resource location
  - id: js-predictable-resource
    message: "Predictable resource identifiers - use UUIDs instead of sequential IDs"
    severity: LOW
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          $VAR = $NUM++
      - pattern: |
          $OBJ.id = $COUNTER++
      - pattern: |
          uuid.v1()
    metadata:
      category: security
      owasp: "A04:2021"
      cwe: CWE-330
      confidence: low
      subcategory: design

  # ===================================================================== 
  # A05:2021 - Security Misconfiguration
  # =====================================================================

  # Debug mode enabled
  - id: js-debug-mode-enabled
    message: "Debug mode enabled in production - exposes sensitive information"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          { ..., debug: true, ... }
      - pattern: process.env.NODE_ENV = "development"
      - pattern: app.set("env", "development")
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-489
      confidence: medium
      subcategory: configuration

  # Debugger statement in code
  - id: js-debugger-statement
    message: "Debugger statement should not be in production code"
    severity: LOW
    languages: [javascript, typescript]
    pattern: debugger
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-489
      confidence: high
      subcategory: configuration

  # Weak session configuration
  - id: js-weak-session-cookie
    message: "Insecure session cookie configuration"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          session({ ..., secure: false, ... })
      - pattern: |
          session({ ..., httpOnly: false, ... })
      - pattern: |
          session({ ..., sameSite: false, ... })
      - pattern: |
          session({ ..., sameSite: "none", ... })
      - pattern: |
          $RES.cookie($NAME, $VAL, { ..., secure: false, ... })
      - pattern: |
          $RES.cookie($NAME, $VAL, { ..., httpOnly: false, ... })
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-614
      confidence: high
      subcategory: configuration

  # Missing security headers (Helmet.js)
  - id: js-missing-helmet
    message: "Express app missing Helmet.js security headers middleware"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: const $APP = express()
          - pattern: var $APP = express()
          - pattern: let $APP = express()
      - pattern-not-inside: |
          ...
          $APP.use(helmet(...))
          ...
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-693
      confidence: low
      subcategory: configuration

  # Error stack traces exposed
  - id: js-error-stack-exposed
    message: "Error stack trace exposed to client - can leak sensitive information"
    severity: MEDIUM
    languages: [javascript, typescript]
    pattern-either:
      - pattern: $RES.send($ERR.stack)
      - pattern: "$RES.json({ ..., stack: $ERR.stack, ... })"
      - pattern: $RES.status(...).send($ERR)
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-209
      confidence: high
      subcategory: configuration

  # Default credentials
  - id: js-default-credentials
    message: "Default or weak credentials detected"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: |
          password: "admin"
      - pattern: |
          password: "password"
      - pattern: |
          password: "123456"
      - pattern: |
          password: ""
      - pattern: |
          { ..., user: "admin", password: "admin", ... }
    metadata:
      category: security
      owasp: "A05:2021"
      cwe: CWE-798
      confidence: high
      subcategory: configuration

  # ===================================================================== 
  # A06:2021 - Vulnerable and Outdated Components
  # =====================================================================

  # Deprecated APIs
  - id: js-deprecated-crypto-api
    message: "Deprecated crypto API - use crypto.createCipheriv instead"
    severity: MEDIUM
    languages: [javascript, typescript]
    pattern: crypto.createCipher(...)
    metadata:
      category: security
      owasp: "A06:2021"
      cwe: CWE-327
      confidence: high
      subcategory: deprecated

  # Unsafe Buffer constructor
  - id: js-unsafe-buffer
    message: "Unsafe Buffer allocation - use Buffer.alloc() or Buffer.from()"
    severity: MEDIUM
    languages: [javascript, typescript]
    pattern-either:
      - pattern: new Buffer($SIZE)
      - pattern: Buffer($SIZE)
      - pattern: Buffer.allocUnsafe($SIZE)
    metadata:
      category: security
      owasp: "A06:2021"
      cwe: CWE-119
      confidence: high
      subcategory: deprecated

  # ===================================================================== 
  # A07:2021 - Identification and Authentication Failures
  # =====================================================================

  # Weak password requirements
  - id: js-weak-password-validation
    message: "Weak password validation - enforce strong password policy"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: $PASSWORD.length < $N
          - pattern: $PASSWORD.length > $MIN
      - metavariable-comparison:
          metavariable: $N
          comparison: $N < 8
      - metavariable-comparison:
          metavariable: $MIN
          comparison: $MIN < 8
    metadata:
      category: security
      owasp: "A07:2021"
      cwe: CWE-521
      confidence: low
      subcategory: authentication

  # JWT without verification
  - id: js-jwt-no-verify
    message: "JWT decoded without signature verification - use jwt.verify()"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: jwt.decode($TOKEN)
      - pattern: jsonwebtoken.decode($TOKEN)
      - pattern: |
          jwt.verify($TOKEN, ..., { ..., verify: false, ... })
    metadata:
      category: security
      owasp: "A07:2021"
      cwe: CWE-347
      confidence: high
      subcategory: authentication

  # Weak JWT secret
  - id: js-weak-jwt-secret
    message: "Weak JWT secret - use a strong random secret"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern: jwt.sign(..., $SECRET, ...)
      - metavariable-regex:
          metavariable: $SECRET
          regex: (?i)^["']?(secret|test|dev|password|123|abc|qwerty|admin|changeme|default)["']?$
    metadata:
      category: security
      owasp: "A07:2021"
      cwe: CWE-798
      confidence: high
      subcategory: authentication

  # Session fixation
  - id: js-session-fixation
    message: "Session fixation vulnerability - regenerate session after login"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-inside: |
          $APP.post("/login", ..., async ($REQ, $RES) => {
            ...
          })
      - pattern-not-inside: |
          ...
          $REQ.session.regenerate(...)
          ...
    metadata:
      category: security
      owasp: "A07:2021"
      cwe: CWE-384
      confidence: low
      subcategory: authentication

  # ===================================================================== 
  # A08:2021 - Software and Data Integrity Failures
  # =====================================================================

  # Unsafe deserialization
  - id: js-unsafe-deserialization
    message: "Unsafe deserialization - can lead to remote code execution"
    severity: CRITICAL
    languages: [javascript, typescript]
    pattern-either:
      # Dangerous deserialization libraries
      - pattern: serialize.unserialize($DATA)
      - pattern: node-serialize.unserialize($DATA)
      - pattern: funcster.deepDeserialize($DATA)
      # Eval-based JSON parsing
      - pattern: eval("(" + $JSON_STR + ")")
      - pattern: Function("return " + $JSON_STR)()
      # VM module with untrusted data
      - pattern: vm.runInNewContext($REQ.body.$PARAM)
      - pattern: vm.runInThisContext($REQ.query.$PARAM)
    metadata:
      category: security
      owasp: "A08:2021"
      cwe: CWE-502
      confidence: high
      subcategory: integrity

  # Missing integrity check for external resources
  - id: js-missing-sri
    message: "External resource loaded without Subresource Integrity (SRI) check"
    severity: MEDIUM
    languages: [html]
    patterns:
      - pattern-either:
          - pattern: |
              <script src="http://..."></script>
          - pattern: |
              <script src="https://..."></script>
          - pattern: |
              <link href="https://..." rel="stylesheet">
      - pattern-not: |
          <... integrity="..." ...>
    metadata:
      category: security
      owasp: "A08:2021"
      cwe: CWE-353
      confidence: low
      subcategory: integrity

  # Insecure update mechanism
  - id: js-insecure-auto-update
    message: "Auto-update mechanism without integrity verification"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: autoUpdater.checkForUpdates()
          - pattern: autoUpdater.downloadUpdate()
      - pattern-not-inside: |
          ...
          autoUpdater.on("update-downloaded", ..., (info) => {
            ...
            crypto.verify(...)
            ...
          })
          ...
    metadata:
      category: security
      owasp: "A08:2021"
      cwe: CWE-494
      confidence: low
      subcategory: integrity

  # ===================================================================== 
  # A09:2021 - Security Logging and Monitoring Failures
  # =====================================================================

  # Sensitive data in logs
  - id: js-sensitive-data-in-logs
    message: "Sensitive data logged - can expose credentials or personal information"
    severity: MEDIUM
    languages: [javascript, typescript]
    pattern-either:
      - pattern: console.log(..., $REQ.body.password, ...)
      - pattern: console.log(..., $REQ.body.token, ...)
      - pattern: console.log(..., $REQ.headers.authorization, ...)
      - pattern: logger.info(..., $PASSWORD, ...)
      - pattern: logger.debug(..., $TOKEN, ...)
      - pattern: console.error(..., $SECRET, ...)
    metadata:
      category: security
      owasp: "A09:2021"
      cwe: CWE-532
      confidence: low
      subcategory: logging

  # Missing error logging
  - id: js-missing-error-logging
    message: "Error caught but not logged - can hide security issues"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern: |
          try {
            ...
          } catch ($ERR) {
          }
      - pattern-not-inside: |
          try {
            ...
          } catch ($ERR) {
            ...
            console.error(...)
            ...
          }
      - pattern-not-inside: |
          try {
            ...
          } catch ($ERR) {
            ...
            logger.error(...)
            ...
          }
    metadata:
      category: security
      owasp: "A09:2021"
      cwe: CWE-778
      confidence: low
      subcategory: logging

  # ===================================================================== 
  # A10:2021 - Server-Side Request Forgery (SSRF)
  # =====================================================================

  # SSRF via user-controlled URL - using taint mode for accurate detection
  - id: js-ssrf-vulnerability
    message: "SSRF vulnerability detected. User-controlled data flows into HTTP request URL. Validate and whitelist URLs before making requests."
    severity: HIGH
    languages: [javascript, typescript]
    mode: taint
    pattern-sources:
      # User-controlled input sources
      - pattern: req.query
      - pattern: req.params
      - pattern: req.body
      - pattern: req.headers
      - pattern: ctx.query
      - pattern: ctx.params
      - pattern: request.query
      - pattern: request.params
      - pattern: request.body
    pattern-propagators:
      # String concatenation
      - pattern: $A + $B
        from: $B
        to: $A
    pattern-sinks:
      # HTTP client methods
      - pattern: fetch(...)
      - pattern: axios.get(...)
      - pattern: axios.post(...)
      - pattern: axios.request(...)
      - pattern: request(...)
      - pattern: http.get(...)
      - pattern: http.request(...)
      - pattern: https.get(...)
      - pattern: https.request(...)
      - pattern: got(...)
      - pattern: superagent.get(...)
      - pattern: needle.get(...)
    pattern-sanitizers:
      # URL validation and whitelisting
      - pattern: new URL(...)
      - pattern: $URL.startsWith("http://localhost")
      - pattern: $URL.startsWith("https://trusted-domain.com")
    metadata:
      category: security
      owasp: "A10:2021"
      cwe: CWE-918
      confidence: high
      subcategory: ssrf

  # =====================================================================
  # JavaScript/TypeScript Best Practices
  # =====================================================================

  # Unsafe type coercion
  - id: js-unsafe-type-coercion
    message: "Unsafe type coercion - use strict equality (===) instead"
    severity: LOW
    languages: [javascript, typescript]
    pattern-either:
      - pattern: $A == $B
      - pattern: $A != $B
    metadata:
      category: best-practice
      cwe: CWE-697
      confidence: low
      subcategory: type-safety

  # Missing await on Promise
  - id: js-missing-await
    message: "Promise not awaited - may cause unexpected behavior"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern-inside: |
          async function $FUNC(...) {
            ...
          }
      - pattern: $PROMISE
      - metavariable-pattern:
          metavariable: $PROMISE
          patterns:
            - pattern-either:
                - pattern: fetch(...)
                - pattern: $DB.query(...)
                - pattern: $DB.execute(...)
      - pattern-not: await $PROMISE
    metadata:
      category: best-practice
      cwe: CWE-703
      confidence: low
      subcategory: async

  # Unhandled Promise rejection
  - id: js-unhandled-promise-rejection
    message: "Promise without error handling - can cause unhandled rejections"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: |
              $PROMISE.then(...)
          - pattern: |
              await $ASYNC_CALL
      - pattern-not: |
          $PROMISE.then(...).catch(...)
      - pattern-not-inside: |
          try {
            ...
          } catch ($E) {
            ...
          }
    metadata:
      category: best-practice
      cwe: CWE-755
      confidence: low
      subcategory: error-handling

  # RegEx Denial of Service (ReDoS)
  - id: js-regex-dos
    message: "Complex regex pattern - potential ReDoS vulnerability"
    severity: MEDIUM
    languages: [javascript, typescript]
    pattern-either:
      # User input used as regex
      - pattern: new RegExp($REQ.query.$PARAM)
      - pattern: new RegExp($REQ.body.$PARAM)
      - pattern: RegExp($REQ.query.$PARAM)
      # Dangerous regex patterns (nested quantifiers)
      - pattern: |
          /(.+)+/
      - pattern: |
          /(.*)+/
      - pattern: |
          /(.*)*/
      - pattern: |
          /([a-zA-Z]+)*/
      - pattern: |
          /(a+)+/
      - pattern: |
          /(a|a)*/
    metadata:
      category: security
      cwe: CWE-1333
      confidence: medium
      subcategory: dos

  # Unsafe parseInt without radix
  - id: js-parseint-missing-radix
    message: "parseInt() without radix parameter - can cause unexpected results"
    severity: LOW
    languages: [javascript, typescript]
    pattern: parseInt($STR)
    metadata:
      category: best-practice
      cwe: CWE-704
      confidence: high
      subcategory: type-safety

  # =====================================================================
  # Framework-Specific Rules
  # =====================================================================

  # React dangerouslySetInnerHTML
  - id: js-react-dangerous-html
    message: "React dangerouslySetInnerHTML can introduce XSS vulnerabilities"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern: <$EL dangerouslySetInnerHTML={...} />
      - pattern-not: <$EL dangerouslySetInnerHTML={"..."} />
    metadata:
      category: security
      framework: react
      cwe: CWE-79
      confidence: high
      subcategory: xss

  # React missing key prop
  - id: js-react-missing-key
    message: "Missing key prop in list rendering - can cause rendering issues"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern: |
          $ARR.map($ITEM => <$COMPONENT ... />)
      - pattern-not: |
          $ARR.map($ITEM => <$COMPONENT key={...} ... />)
    metadata:
      category: best-practice
      framework: react
      confidence: low
      subcategory: performance

  # Express missing async error handler
  - id: js-express-async-no-error-handler
    message: "Async Express route handler without try-catch - errors won't be caught"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern: |
          $APP.$METHOD($PATH, async ($REQ, $RES) => {
            ...
          })
      - pattern-not-inside: |
          $APP.$METHOD($PATH, async ($REQ, $RES) => {
            try {
              ...
            } catch ($ERR) {
              ...
            }
          })
      - pattern-not-inside: |
          $APP.$METHOD($PATH, async ($REQ, $RES, $NEXT) => {
            try {
              ...
            } catch ($ERR) {
              ...
            }
          })
    metadata:
      category: best-practice
      framework: express
      cwe: CWE-755
      confidence: medium
      subcategory: error-handling

  # Express trust proxy not set
  - id: js-express-trust-proxy-not-set
    message: "Express behind proxy without 'trust proxy' setting"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern: const $APP = express()
      - pattern-not-inside: |
          ...
          $APP.set("trust proxy", ...)
          ...
    metadata:
      category: configuration
      framework: express
      cwe: CWE-693
      confidence: low
      subcategory: proxy

  # Next.js getServerSideProps without error handling
  - id: js-nextjs-gsp-no-error-handling
    message: "getServerSideProps without error handling"
    severity: LOW
    languages: [javascript, typescript]
    patterns:
      - pattern: |
          export async function getServerSideProps(...) {
            ...
          }
      - pattern-not-inside: |
          export async function getServerSideProps(...) {
            try {
              ...
            } catch ($E) {
              ...
            }
          }
    metadata:
      category: best-practice
      framework: nextjs
      cwe: CWE-755
      confidence: low
      subcategory: error-handling

  # =====================================================================
  # Node.js Specific Vulnerabilities
  # =====================================================================

  # Unsafe file operations
  - id: js-unsafe-file-operations
    message: "Unsafe file operation - validate file paths"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: fs.unlinkSync($REQ.$PROP)
      - pattern: fs.unlink($REQ.$PROP, ...)
      - pattern: fs.rmdir($REQ.$PROP, ...)
      - pattern: fs.rmdirSync($REQ.$PROP)
      - pattern: fs.chmod($REQ.$PROP, ...)
      - pattern: fs.chmodSync($REQ.$PROP, ...)
    metadata:
      category: security
      runtime: nodejs
      cwe: CWE-73
      confidence: high
      subcategory: file-operations

  # Process execution with user input
  - id: js-unsafe-process-spawn
    message: "Unsafe process execution with user input"
    severity: HIGH
    languages: [javascript, typescript]
    pattern-either:
      - pattern: spawn($REQ.$PROP, ...)
      - pattern: spawnSync($REQ.$PROP, ...)
      - pattern: fork($REQ.$PROP, ...)
      - pattern: execFile($REQ.$PROP, ...)
    metadata:
      category: security
      runtime: nodejs
      cwe: CWE-78
      confidence: high
      subcategory: process

  # Timing attack vulnerability
  - id: js-timing-attack
    message: "String comparison vulnerable to timing attacks - use crypto.timingSafeEqual()"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          # Direct comparison of sensitive values
          - patterns:
              - pattern: $A === $B
              - metavariable-regex:
                  metavariable: $A
                  regex: .*(token|Token|TOKEN|secret|Secret|SECRET|key|Key|KEY).*
              - metavariable-regex:
                  metavariable: $B
                  regex: .*(req|REQ|request|input|user|User).*
          # Password comparisons
          - patterns:
              - pattern: $PASSWORD === $INPUT_PASSWORD
              - metavariable-regex:
                  metavariable: $PASSWORD
                  regex: .*(password|Password|PASSWORD|passwd).*
      - pattern-not-inside: |
          ...
          crypto.timingSafeEqual(...)
          ...
    metadata:
      category: security
      cwe: CWE-208
      confidence: low
      subcategory: crypto

  # Unvalidated file upload
  - id: js-unvalidated-file-upload
    message: "File upload without validation - validate file type and size"
    severity: HIGH
    languages: [javascript, typescript]
    patterns:
      - pattern: |
          $APP.post($PATH, $UPLOAD.single(...), ...)
      - pattern-not-inside: |
          if ($FILE.mimetype === "...") { ... }
      - pattern-not-inside: |
          if ($FILE.size > ...) { ... }
    metadata:
      category: security
      cwe: CWE-434
      confidence: low
      subcategory: upload

  # Zip bomb / decompression bomb
  - id: js-zip-bomb
    message: "Zip decompression without size limit - vulnerable to zip bombs"
    severity: MEDIUM
    languages: [javascript, typescript]
    patterns:
      - pattern-either:
          - pattern: unzip.Extract(...)
          - pattern: $ZIP.extractAllTo(...)
          - pattern: decompress($FILE, ...)
      - pattern-not-inside: |
          ...
          if ($SIZE > ...) { ... }
          ...
    metadata:
      category: security
      cwe: CWE-409
      confidence: low
      subcategory: dos